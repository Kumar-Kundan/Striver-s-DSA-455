class Solution{
  public:
    int minJumps(int arr[], int n){
        int count=0,i=0;
        int m;
        
        if(arr[i]==0 && n>1)
           return -1;
        if(arr[i]==0 && n==1)
           return 0;
        
        while(i+arr[i]<n-1){
            m=i+1;
            for(int j=i+2;j<=i+arr[i];++j){
               //Finding the max sum of j+arr[j] upto to i+a[i]
               if(arr[m]+m<arr[j]+j)
                  m=j;
            }
            if(arr[m]==0)
               return -1;
            i=m;
            ++count;   
        }
        return ++count;
    }
};

EFFICIENT ONE

class Solution{
  public:
    int minJumps(int arr[], int n){
       int jump=0,max=0,reach=0;
       
       for(int i=0;i<n-1;++i){
           
           //Finding max sum of i+arr[i]
           if(i+arr[i]>max)
              max=i+arr[i];
              
           //counting number of jump as i reaches to reach
           if(i==reach){
               reach=max;
               ++jump;
           }
           if(arr[i]==0 && i==max)
              return -1;
       }
       return jump;
    }
};
