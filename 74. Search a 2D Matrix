class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int first1=0,first2=0;
        int last1=matrix.size()-1,last2=matrix[0].size()-1;
        int mid;

        //applying binary search in row wise of first column
        while(first1<last1){
            mid=(first1+last1)/2;
            if(matrix[mid][0]==target)
                return true;
            else if(matrix[mid][0]<target){
                if(matrix[mid+1][0]>target){
                    first1=mid;
                    break;
                }
                else
                    first1=mid+1;
            }
            else{
                last1=mid-1;
            }
        }

        //applying binary search in particular row which found in 
        //above.
        while(first2<last2){
            mid=(first2+last2)/2;
            if(matrix[first1][mid]==target)
                return true;
            else if(matrix[first1][mid]<target)
                first2=mid+1;
            else
                last2=mid-1;
        }
        mid=(first2+last2)/2;
        if(matrix[first1][mid]==target)
            return true;
        //int r=binarySearch(matrix,first1,last1);
        return false;
    }

    //Binary search
    // int binarySearch(vector<vector<int>> matrix,int first,int last){
        
    // }
    // bool searchMatrix(vector<vector<int>>& matrix, int target) {
    //     int i=0;
    //     int N=matrix.size(),M=matrix[0].size();

    //     //restricting the target to a row 
	//     while(i<N-1){
	//         if(matrix[i][0]<=target && target<matrix[i+1][0])
	//             break;
	//         ++i;
	//     }

    //     //searching target in restricted row
	//     return binarySearch(matrix,i,M,target);
	// }
	
    // //function of binary search
	// int binarySearch(vector<vector<int>>mat,int i,int M,int X){
	//     int first=0,last=M-1;
	//     int mid;
	    
	//     while(first<=last){
	//         mid=(first+last)/2;
	        
	//         if(mat[i][mid]==X)
	//             return 1;
	//         else if(mat[i][mid]<X)
	//             first=mid+1;
	//         else
	//             last=mid-1;
	//     }
	//     return 0;
	// }
    // //time complexity=O(n+log m)
    // //space complexity=O(logn+log m)
};
