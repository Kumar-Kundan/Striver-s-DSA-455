class Solution {
public:

    // //using hash table
    // vector<int> majorityElement(vector<int>& nums) {
    //     unordered_map<int,int> hash;
    //     vector<int> result;

    //     //counting each element in hash table
    //     for(auto num:nums)
    //             ++hash[num];

    //     //if any element is greater than n/3
    //     //then insert into vector
    //     for(auto i:hash)
    //            if(i.second>nums.size()/3)
    //                result.push_back(i.first);
    //     return result;
    // }
    //time complexity=O(N)
    //space complexity=O(N)

    //Boyer Moore Voting Algorithm
    vector<int> majorityElement(vector<int>& nums) {
        //maximum two majority element can occur(obser1)
        //because we are dividing array into 3 parts
        int size=nums.size();
        vector<int> result;
        int maj1=INT32_MIN,maj2=INT32_MIN;
        int count1=0,count2=0;

        for(int i=0;i<size;++i){
            if(nums[i]==maj1)
                ++count1;
            else if(nums[i]==maj2)
                ++count2;
            else if(count1==0){
                maj1=nums[i];
                count1=1;
            }
            else if(count2==0){
                maj2=nums[i];
                count2=1;
            }
            // when nums[i] not equal to maj1 and maj2
            else{
                --count1;
                --count2;
            }
        }
        //majority elements may or may not be greater than n/3
        //so,we have to count them
        count1=0,count2=0;
        for(auto num:nums){
            if(maj1==num)
               ++count1;
            else if(maj2==num)
               ++count2;
        }

        //checking thatcount of maj1 and maj2 are greater or not
        if(count1>size/3)
            result.push_back(maj1);
        if(count2>size/3)
            result.push_back(maj2);
        
        return result;
    }
};
