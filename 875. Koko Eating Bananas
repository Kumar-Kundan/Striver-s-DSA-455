class Solution {
public:
    
    int minEatingSpeed(vector<int>& piles, int h) {
        int max=piles[0];
        long sum=piles[0];

        //maximum element will be maximum k value
        for(int i=1;i<piles.size();++i){
            if(max<piles[i])
                max=piles[i];
            sum+=piles[i];
        }
    
        //using binary search
        //average value will be minimum k value
        int first=ceil((sum*1.0)/h);
        int last=max;
        int mid;
        int temp1=h;
        while(first<last){
            mid=first+(last-first)/2;

            h=temp1;
            //checking that mid can be a value of k or not
            for(int i=0;i<piles.size();++i)
                h-=ceil((piles[i]*1.0)/mid);
            
            // if mid will be a value or mid is too greater
            if(h>=0)
                 last=mid;
            
            //if mid value is less
            else
                 first=mid+1;
        }
        return first;
    }

    //time complexity=O(nlogn)
};
